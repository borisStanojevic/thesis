type User {
  id: ID!
  username: String!
  email: String
  firstName: String
  lastName: String
  profilePicture: String!
  channelDescription: String
  role: Role
  registrationDate: DateTime
  isBlocked: Boolean
  subscribers: [User!]!
}

enum Role {
  ADMIN
  STANDARD
}

type Video {
  id: ID!
  url: String!
  description: String
  visibility: Visibility!
  isCommentingAllowed: Boolean!
  isRatingVisible: Boolean!
  isBlocked: Boolean
  dateUploaded: DateTime!
  views: Int!
  uploader: User!
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

type Comment {
  id: ID!
  content: String!
  author: User!
  video: Video!
  datePosted: DateTime!
}

type Query {
  greeting(name: String): String!
  me: User!

  users(query: String): [User!]!
  videos(query: String): [Video!]!
  myVideos(query: String): [Video!]!
  comments(query: String): [Comment!]!

  video(id: ID!): Video!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  deleteUser(id: ID!): User!
  updateUser(data: UpdateUserInput!): User!
  createVideo(url: String!, description: String, uploader: ID!): Video!
  createComment(data: CreateCommentInput!): Comment!
}

type CreateVideoInput {
  url: String!
  title: String!
  description: String
}

type CreateCommentInput {
  content: String!
  video: Video!
}

type Subscription {
  comment(videoId: ID!): CommentSubscriptionPayload!
}

type AuthPayload {
  user: User!
  token: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
  role: Role
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: Role
}
