type User {
  id: ID! @unique
  email: String! @unique
  firstName: String
  lastName: String
  profilePicture: String!
  channelDescription: String
  isBlocked: Boolean!
  role: Role
  subscribers: [User!]!
  uploadedVideos: [Video!]!
  commentsPosted: [Comment!]!
}

enum Role {
  ADMIN
  STANDARD
}

type Video {
  id: ID! @unique
  url: String!
  title: String!
  description: String
  visibility: Visibility!
  isCommentingAllowed: Boolean!
  isRatingVisible: Boolean!
  isBlocked: Boolean
  views: Int!
  likes: Int!
  dislikes: Int!
  uploader: User!
  comments: [Comment!]!
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

type Comment {
  id: ID! @unique
  content: String!
  author: User!
  video: Video!
  likes: Int!
  dislikes: Int!
}

# type Query {
#   greeting(name: String): String!
#   me: User!
#   users(query: String): [User!]!
# }

# type Mutation {
#   createUser(data: CreateUserInput!): User!
#   deleteUser(id: ID!): User!
#   updateUser(id: ID!, data: UpdateUserInput!): User!
#   createVideo(url: String!, description: String, uploader: ID!): Video!
#   createComment(content: String!, author: ID!, video: ID!): Comment!
# }

# type Subscription {
#   comment(videoId: ID!): CommentSubscriptionPayload!
# }

# enum MutationType {
#   CREATED
#   UPDATED
#   DELETED
# }

# type CommentSubscriptionPayload {
#   mutation: MutationType!
#   data: Comment!
# }

# input CreateUserInput {
#   username: String!
#   email: String!
#   role: Role
# }

# input UpdateUserInput {
#   email: String
#   role: Role
#   firstName: String
# }
