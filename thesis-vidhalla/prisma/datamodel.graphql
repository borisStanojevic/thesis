#SET_ NULL (default) | CASCADE

type User {
  id: ID! @unique
  email: String! @unique
  password: String!
  firstName: String
  lastName: String
  profilePicture: String! @default(value: "default.png")
  channelDescription: String
  isBlocked: Boolean!
  isDeleted: Boolean!
  role: Role!
  registrationDate: DateTime!
  subscribers: [User!]!
  videosUploaded: [Video!]! @relation(name: "VideoToUser", onDelete: CASCADE)
  commentsPosted: [Comment!]!
    @relation(name: "CommentToUser", onDelete: CASCADE)
}

enum Role {
  ADMIN
  STANDARD
}

type Video {
  id: ID! @unique
  url: String!
  title: String!
  description: String
  visibility: Visibility!
  isCommentingAllowed: Boolean! @default(value: "true")
  isRatingVisible: Boolean! @default(value: "true")
  isBlocked: Boolean!
  isDeleted: Boolean!
  dateUploaded: DateTime!
  views: Int!
  likes: Int!
  dislikes: Int!
  uploader: User! @relation(name: "VideoToUser", onDelete: SET_NULL)
  comments: [Comment!]! @relation(name: "CommentToVideo", onDelete: CASCADE)
}

type VideoVote {
  id: ID! @unique
  author: User!
  video: Video!
  dateCreated: DateTime!
  type: VoteType
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

type Comment {
  id: ID! @unique
  content: String!
  likes: Int!
  dislikes: Int!
  isDeleted: Boolean!
  datePosted: DateTime!
  video: Video! @relation(name: "CommentToVideo", onDelete: SET_NULL)
  author: User! @relation(name: "CommentToUser", onDelete: SET_NULL)
}

type CommentVote {
  id: ID! @unique
  author: User!
  comment: Comment!
  dateCreated: DateTime!
  type: VoteType!
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
